/*
 * Lab3_SoftwarePWM_MSP430G2553.c
 *
 *  Created on: Oct. 3, 2018
 *  Last Edited: Oct 3, 2018
 *      Author: John Garvey
 */

#include <msp430.h> 

// Initialize our LEDS
int LEDSetup(){
    P1DIR |= BIT6;  // P1.6 is I/O
    P1SEL |= BIT6;  // P1.6 is an output
    return 0;
}

// Initialize our button
int ButtonSetup(){
    P1IE |= BIT3;   // Enable interrupt on button
    P1IES |= BIT3;  // Enable high to low on interrupt
    P1IFG &= ~BIT3; // Clear flags
    return 0;
}

// Initialize Timer0
int TimerA0Setup(){
    CCR0 = 1000 - 1;    // Set CCR0 to 1000 - 1
    CCTL1 |= OUTMOD_7;  // CCR0 toggle/set
    TACTL = TASSEL_2 + MC_1;    // Set SMCLK and Up mode
    return 0;
}

// Initialize Timer1
int TimerA1Setup(){
    CCR1 = 0;   // Initially, CCR1 is 0
    return 0;
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    BCSCTL3 = LFXT1S_2; // Enable internal oscillator for clk

    LEDSetup(); // Initialize our LEDS
    ButtonSetup();  // Initialize our button
    TimerA0Setup(); // Initialize Timer0
    TimerA1Setup(); // Initialize Timer1

    __bis_SR_register(LPM0_bits + GIE); // Enter LPM0 w/ interrupt
}

#pragma vector = TIMER0_A0_VECTOR   // Timer interrupt
__interrupt void Timer_A()
{
    P1OUT ^= BIT6;  // Toggle led output
}

#pragma vector = PORT1_VECTOR // Button press interrupt
__interrupt void Port_1(void)
{
    CCR1 = (CCR1 + 250) % 1000; // Add 250 to CCR1 and % by 1000 for 4 modes
    P1IFG &= ~BIT3; // Clear flag
}

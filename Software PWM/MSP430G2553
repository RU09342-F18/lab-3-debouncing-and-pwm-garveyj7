/*
 * Lab3_SoftwarePWM_MSP430G2553.c
 *
 *  Created on: Oct. 2, 2018
 *  Last Edited: Oct. 5, 2018
 *      Author: John Garvey
 */

#include <msp430.h>

void LEDSetup();
void ButtonSetup();
void TimerA0Setup();
void TimerA1Setup();

int main(void){
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    BCSCTL3 = LFXT1S_2; // Enable internal oscillator for clk

    LEDSetup(); // Initialize our LEDS
    ButtonSetup();  // Initialize our button
    TimerA0Setup(); // Initialize Timer0
    TimerA1Setup(); // Initialize Timer1

    _BIS_SR(LPM0_bits + GIE);        // Enter LPM0 with global interrupt enable
}

// Initialize our LEDS
void LEDSetup(void){
    P1DIR |= BIT0;  // P1.0 is I/O
    P1SEL &= ~BIT0;  // P1.0 is an output
}

// Initialize our button
void ButtonSetup(void){
    P1DIR &= ~BIT3; // Set button as an input
    P1REN |= BIT3;  // Enable pull up/down resistor
    P1OUT |= BIT3;  // Select pull up resistor
    P1IE |= BIT3;   // Enable interrupt on button
    P1IES |= BIT3;  // Enable high to low on interrupt
    P1IFG &= ~BIT3; // Clear flags
}

// Initialize Timer0
void TimerA0Setup(void){
    CCR0 = 1000 - 1;    // Set CCR0
    CCTL0 |= CCIE;  // CCR0 toggle/set
    TACTL = TASSEL_2 + MC_1;    // Set SMCLK and Up mode
}

// Initialize Timer1
void TimerA1Setup(void){
    CCTL1 |= CCIE;  // CCR1 toggle/set
    CCR1= 500;  // Initialize at 50% duty cycle (50% of CCR0)
}

// Timer0 Interrupt
#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer0_A0_ISR (void){
    if(CCR1 != 0){  // If CCR1 has some value, toggle LED
        P1OUT |= BIT0;
    }
    CCTL0 &= ~BIT0; // Clear flag
}

// Timer1 Interrupt
#pragma vector = TIMER0_A1_VECTOR
__interrupt void Timer0_A1_ISR (void){
    P1OUT &= ~BIT0; // Toggle LED
    CCTL1 &= ~BIT0; // Clear flag
}

// Button press interrupt
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void){
    P1IES ^= BIT3;  // Toggle LED
    if (~P1IES & BIT3){     // If button pressed, increase CCR1 by 100 (10% of CCR0), when it reaches 1000, reset back to 0
        CCR1 = (CCR1 + 100) % 1000;
    }
    P1IFG &= ~BIT3; // Clear flag
}
